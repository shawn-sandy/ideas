// https://itnext.io/advanced-use-of-sass-maps-bd5a47ca0d1a
// https://github.com/dvlden/differs

// ---------------------------------------------------------
// get
// Search for any value contained within nested maps, by using
// dot notation as the key argument and converts into
// selectors-modifier
//
//
// Required arguments:
// `$key` String
//
// Example of use:
// get('border.radius.xs')
//
// Dependencies:
// deep-map-check, deep-map-get, str-explode
//
// @return Anything
// ---------------------------------------------------------

@function get($key, $map: $tokens) {
  $keys: str-explode($key, ".");

  // @error "keys #{$keys}";
  @if not deep-map-check($map, $keys...) {
    @error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
  }
  @return deep-map-get($map, $keys...);

}

//------
// alias for get function

@function token($key, $map: $tokens) {  
  @return get($key, $map)
}

// ---------------------------------------------------------
// deep-map-check
// Check if nested map has a value by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-check($nested-map, 'key-1', 'key-2')
//
// @return Bool
// ---------------------------------------------------------
@function deep-map-check($map, $keys...) {
  @if type-of($map) != "map" {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return true;
}

// ---------------------------------------------------------
// deep-map-get
// Get a value from nested map by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-get($dfr-spacing, 'xs', 'y')
//
// @return Unspecified (it may return anything as a result)
// ---------------------------------------------------------
@function deep-map-get($map, $keys...) {
  @if type-of($map) != "map" {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// ---------------------------------------------------------
// str-explode
// Split a string by delimiter
//
// Required arguments:
// `$string` String
// `$delimiter` String *predefined*
//
// Example of use:
// str-explode('some-things-will-never-change', '-')
//
// @return List
// ---------------------------------------------------------
@function str-explode($string, $delimiter: "") {
  @if type-of($string) != "string" {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  } @else if type-of($delimiter) != "string" {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }

  $result: ();
  $running: true;

  @if str-length($delimiter) == 0 {
    @for $i from 1 through str-length($string) {
      $result: append($result, str-slice($string, $i, $i));
    }
    @return $result;
  }

  @while $running {
    $index: str-index($string, $delimiter);

    @if $index != null {
      $item: str-slice($string, 1, ($index - 1));
      $result: append($result, $item);
      $string: str-slice($string, ($index + str-length($delimiter)));
    } @else {
      $running: false;
    }
  }

  @return append($result, $string);
}

@function is-modifier-state($state) {
  @if index($mix-modifier-states, $state) != null {
    @return true;
  }
  @return false;
}

@function dynamic-hover-color($color) {
  @if (lightness($color) > 50) {
    @return darken($color, 10%) !important;
  } @else {
    @return transparentize($color, 0.09) !important;
  }
}
