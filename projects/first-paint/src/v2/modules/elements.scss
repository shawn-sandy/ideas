// set variables
// TODO Search and replace name with CSS tag/element name
@use './utilities/maps';
@use './utilities/mixins' as mix;
@use './utilities/functions' as fn;
$render: true !default;
$prefix: "layout";
$tokens: ();

// render component mixin
@mixin renderComponent($renderContent: $render, $className: null) {
  @if ($renderContent) {
    html {
      @include maps.customProperties($tokens, $prefix);
    }
    @include elements();
  }
}

@mixin elements() {
  // TODO add mixin code
  p,
  li,
  aside,
  blockquote,
  em,
  strong,
  small,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: var(--fs);
    color: var(--cl);
    text-decoration: var(--decoration);
    text-shadow: none;
    text-transform: var(--transform);
  }
  * {
    box-shadow: var(--shadow);
    text-shadow: var(--text-shadow);
  }
}

:any-link {
  color: var(--cl);
  + * {
    margin-inline-start: var(--ml);
    --ml: var(--rem);
  }
  :where(em, strong, b, div) {
    @include mix.button();
  }

  b {
    --bg: transparent;
    --border: var(--border-1);
    border-width: 2px;
  }

  em {
    --border-rad: 99rem;
  }

  strong,
  div {
    --dsp: var(--dsp-i);
    display: inline-flex;
  }
}

button {
  @include mix.button();
}

article {
  + article {
    margin-block-start: var(--mt);
  }
}

hr {
  --rem: var(--2xl);
  margin-block: var(--rem);
  border: var(--border);
  border-bottom: var(--border-1);
}

@mixin config($_color: null, $_background-color: null) {
  $elements-color: $_color !global;
  $elements-background-color: $_background-color !global;
}

@include renderComponent();
