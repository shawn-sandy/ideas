// set variables
// TODO Search and replace name with CSS tag/element name
@use './utilities/maps';
$render: true !default;
$prefix: "layout";
$tokens: ();
// render component mixin
@mixin renderComponent($renderContent: $render, $className: null) {
  @if ($renderContent) {
    @include maps.customProperties($tokens, $prefix);
    @include layout();
    @include layout-containers();
    * {
      @include layout-content();
    }
  }
}

@mixin layout {
  // TODO add mixin code
  html,
  body,
  div,
  header,
  span,
  applet,
  object,
  iframe,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  blockquote,
  pre,
  a,
  abbr,
  acronym,
  address,
  big,
  cite,
  code,
  del,
  dfn,
  em,
  img,
  ins,
  kbd,
  q,
  s,
  samp,
  small,
  strike,
  strong,
  sub,
  sup,
  tt,
  var,
  b,
  u,
  i,
  center,
  dl,
  dt,
  dd,
  ol,
  ul,
  li,
  fieldset,
  form,
  label,
  legend,
  table,
  caption,
  tbody,
  tfoot,
  thead,
  tr,
  th,
  td,
  p,
  article,
  aside,
  canvas,
  details,
  embed,
  figure,
  figcaption,
  footer,
  header,
  hgroup,
  menu,
  main,
  nav,
  output,
  ruby,
  section,
  summary,
  time,
  mark,
  audio,
  video {
    --bg: transparent;
    margin: var(--m);
    padding: var(--p);
    border: 0;
    font: inherit;
    font-family: var(--fs-family);
    font-size: var(--fs-size);
    vertical-align: var(--v-align);
    outline: var(--outline);
    shadow: var(--shadow);
    background-color: var(--bg);
  }
}

@mixin layout-containers {
  nav,
  header,
  main,
  footer,
  section,
  article,
  aside,
  details,
  summary,
  figure,
  figcaption,
  div,
  p {
    --fs: var(--rem);
    padding: var(--p);
    margin: var(--m);
    display: var(--dp);
    font-size: var(--fs);
  }

  summary,
  details,
  figcaption,
  p {
    --pt: var(--rem);
    --pb: var(--rem);
  }
}

@mixin layout-content() {
  p,
  a,
  li,
  div,
  aside,
  blockquote,
  em,
  strong,
  small,
  span,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: var(--fs);
    color: var(--cl);
    text-decoration: var(--text-decor);
  }

  :where(html) aside,
  em,
  strong,
  small,
  span,
  a {
    &:hover,
    &:focus {
      --decoration: underline;
      outline: var(--outline);
      text-decoration: var(--decoration);
    }
  }
}

@mixin config($_color: null, $_background-color: null) {
  $layout-color: $_color !global;
  $layout-background-color: $_background-color !global;
}

// include render component
@include renderComponent();
