// utility generator

@mixin mix-utilities($tokens) {
  @if length($tokens) >= 1 {
    @each $var in $tokens {
      @include utilities($var);
    }
  }
}

@mixin mix-utility($tokens, $modifier: "") {
  @if length($tokens) >= 1 {
    @each $var in $tokens {
      @include utilities($var, $modifier: $modifier, $map: $mix-tokens);
    }
  }
}

/** generates a series of modifies based a list of attributes  **/
// @mixin mix-colors($map: $tokens) {
//   @include mix-utilities("color");
// }

@mixin mix-fonts($map: $mix-tokens) {
  @include mix-utilities("font", $map);
}

@mixin utilities($token, $map: $mix-tokens, $modifier: "") {
  $utility: get($token, $map);
  // @if $modifier != "" {
  //   $token: $modifier;
  //   @debug "modifier: #{$modifier}";
  // }
  @if length($list: $utility) >= 0 {
    @debug "we got the utility map";
    @each $key, $value in $utility {
      @if type-of($value) == "map" {
        @include map-values($token, $key, $value);
        // @debug "values: #{$value}";
      } @else {
        @if type-of($value) == "color" {
          @include map-colors($value, $key);
        } @else {
          &#{$mix-prefix}#{$key} {
            @if $modifier != "" {
              #{$modifier}: $value !important;
            } @else {
              #{$key}: $value !important;
            }
          }
        }
        // @if type-of($value) == "color" {
        //   @include map-colors($value, $key);
        // }
      }
    }
  } @else {
    @debug "utility map not found";
  }
}

@mixin map-values($token, $modifier-key, $values) {
  @if type-of($values) == "map" {
    @each $key, $val in $values {
      @if type-of($val) == "map" {
        &#{$mix-prefix}#{$token} {
          @include map-values($token, $modifier-key, $val);
        }
      } @else {
        // TODO refactor to handle color maps--remove `color` from output
        @if $key == "base" {
          &#{$mix-prefix}#{$modifier-key}#{$mix-prefix}#{$token} {
            @if type-of($val) == "color" {
              // color: $val !important;
              @include map-colors($val, $key, $modifier-key);
            } @else {
              #{$token}: $val;
            }
          }
        } @else {
          @if type-of($val) == "color" {
            &#{$mix-prefix}#{$modifier-key}#{$mix-prefix}#{$key} {
              @include map-colors($val, $key, $modifier-key);
            }
          } @else {
            @if $key == "base" {
              &#{$mix-prefix}#{$modifier-key} {
                @if type-of($val) == "color" {
                  @include map-colors($val, $key, $modifier-key);
                } @else {
                  #{$token}: $val;
                }
              }
            } @else {
              // @debug "modifier #{$modifier-key}, Key: #{$key}, Token: #{$token}";
              &#{$mix-prefix}#{$modifier-key}#{$mix-prefix}#{$key} {
                #{$token}#{$mix-prefix}#{$modifier-key}: $val !important;
              }
            }
          }
          // @if type-of($val) == "color" {
          //   @include map-colors($val, $key);
          // }
        }
      }
    }
  }
}

@mixin map-colors($val, $item, $name: "") {
  //color: $val;
  @debug "Name: #{$name}";
  @each $attribute in $mix-color-attrs {
    $attr: map-color-attrs($attribute);
    &#{$attr} {
      #{$attribute}: $val !important;
    }
    &#{$attr}-hover {
      &:hover {
        #{$attribute}: transparentize($val, 0.2) !important;
      }
    }
    &#{$attr}\:hover {
      &:hover {
        #{$attribute}: $val !important;
      }
    }
    &#{$attr}\:focus {
      &:focus {
        #{$attribute}: $val !important;
      }
    }
    &#{$attr}#{$mix-prefix}tp {
      #{$attribute}: darken($val, 3%) !important;
    }
  }
}
